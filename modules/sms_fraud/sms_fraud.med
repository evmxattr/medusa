{
    "Name": "sms_fraud/sms_fraud",
    "Description": "Detects calls to API functions which are common for sms fraud fraud malware",
    "Help": "hooks:sendTextMessage, sendMultimediaMessage, sendMultipartTextMessage, createFromPdu",
    "Code": "
{
    console.log('\\n\\n--------SMS Fraud Detection module by @ch0pin---------------');

    var smsManager = Java.use('android.telephony.SmsManager');
    var smsMessage = Java.use('android.telephony.SmsMessage');

    smsMessage.createFromPdu.overloads[0].implementation = function(pdu){
        console.log('[+] Create from Pdu called:');
        displayString(pdu);
        return this.createFromPdu(pdu);
    }
    smsMessage.createFromPdu.overloads[1].implementation = function(pdu,format){
        console.log('[+] Create from Pdu called:');
        console.log('[+] Format: '+ format)
        displayString(pdu);
        return this.createFromPdu(pdu,format);
    }

    smsManager.sendMultipartTextMessage.overloads[0].implementation = function(destinationAddress,  scAddress,  parts,  sentIntents,  deliveryIntents){
        console.log('[+] Send multimedia message called');
        console.log('Destination address: ' + destinationAddress);
        console.log('Source address: '+scAddress);
        console.log('Text message:\\n');
        var iter = parts.iterator();
        while(iter.hasNext()) {
            console.log(iter.next());
        }
        checkDestination(destinationAddress);

        this.sendMultipartTextMessage(destinationAddress,  scAddress,  parts,  sentIntents,  deliveryIntents);
    }

    smsManager.sendMultipartTextMessage.overloads[1].implementation = function(destinationAddress,  scAddress,  parts,  sentIntents,  deliveryIntents,messageId){
        console.log('[+] Send multimedia message called');
        console.log('Destination address: ' + destinationAddress);
        console.log('Source address: '+scAddress);
        console.log('Message Id: '+messageId);
        console.log('Text message:\\n');
        var iter = parts.iterator();
        while(iter.hasNext()) {
            console.log(iter.next());
        }
        checkDestination(destinationAddress);

        this.sendMultipartTextMessage(destinationAddress,  scAddress,  parts,  sentIntents,  deliveryIntents);
    }
    // smsManager.sendMultipartTextMessage.overloads[2].implementation = function(destinationAddress,  scAddress,  parts,  sentIntents,  deliveryIntents,packageName,attributionTag){
    //     console.log('[+] Send multimedia message called');
    //     console.log('Destination address: ' + destinationAddress);
    //     console.log('Source address: '+scAddress);
    //     console.log('Package Name: '+packageName);
    //     console.log('Text message:\\n');
    //     var iter = parts.iterator();
    //     while(iter.hasNext()) {
    //         console.log(iter.next());
    //     }
    //     this.sendMultipartTextMessage(destinationAddress,  scAddress,  parts,  sentIntents,  deliveryIntents,packageName,attributionTag);
    // }

    smsManager.sendMultimediaMessage.implementation = function(context,uri,locationurl,configoverrides,pendingIntent){
        console.log('[+] Send multimedia message called');
        console.log('Uri from which the message pdu will be read: ' + uri);
        console.log('Location url where message should be sent to: '+locationurl);
        this.sendMultimediaMessage(context,uri,locationurl,configoverrides,pendingIntent);
    }
    smsManager.sendTextMessage.overloads[0].implementation = function(destinationAddress, scAddress, text,pendingIntent, deliveryIntent){

        console.log('[+] Send Text message called');
        console.log('Destination Address: ' + destinationAddress);
        console.log('Source Address: '+scAddress);
        console.log('Text: '+text);
        checkDestination(destinationAddress);

        this.sendTextMesssage(destinationAddress,scAddress,text,pendingIntent,deliveryIntent);

    }

    smsManager.sendTextMessage.overloads[1].implementation = function(destinationAddress, scAddress, text,pendingIntent, deliveryIntent,messageId){

        console.log('[+] Send Text message called');
        console.log('Destination Address: ' + destinationAddress);
        console.log('Source Address: '+scAddress);
        console.log('Text: '+text);
        console.log('Message Id: '+messageId);
        checkDestination(destinationAddress);

        this.sendTextMesssage(destinationAddress,scAddress,text,pendingIntent,deliveryIntent,messageId);

    }


    function checkDestination(dest){
        let [short, country] = parseXml(dest);
        if (short != 'Not short code')
            console.log('Detected Short Code number: ' + short + ' ' + country.toUpperCase());
    }

    function parseXml(destinationAddress){
        const dest = Java.use('java.lang.String').$new(destinationAddress);
        var docBuilder = Java.use('javax.xml.parsers.DocumentBuilder');
        docBuilder = Java.use('javax.xml.parsers.DocumentBuilderFactory').newInstance().newDocumentBuilder();;
        // Avoids permission errors when trying to read from /data/misc/sms/codes
        var doc = docBuilder.parse('http://www.gstatic.com/android/config_update/02082024-sms-denylist.txt');
        var Pattern = Java.use('java.util.regex.Pattern');
        var nodeList = doc.getElementsByTagName('shortcode');
        var n = nodeList.getLength();
        var current, category, countryCode;

        for (var i = 0; i < n; i++) {
            current = nodeList.item(i);
            var country = current.getAttributes().getNamedItem('country')
            if (country != null) country = country.getNodeValue();

            var pattern = current.getAttributes().getNamedItem('pattern');
            if (pattern != null) pattern = pattern.getNodeValue();

            var premium = current.getAttributes().getNamedItem('premium');
            if (premium != null) premium = premium.getNodeValue();

            var standard = current.getAttributes().getNamedItem('standard');
            if (standard != null) standard = standard.getNodeValue();

            var free = current.getAttributes().getNamedItem('free');
            if (free != null) free = free.getNodeValue();

            var ShortCodePattern = (pattern != null ? Pattern.compile(pattern) : null);
            var PremiumShortCodePattern = (premium != null ?
                Pattern.compile(premium) : null);
            var FreeShortCodePattern = (free != null ?
                Pattern.compile(free) : null);
            var StandardShortCodePattern = (standard != null ?
                Pattern.compile(standard) : null);

            if (FreeShortCodePattern != null && FreeShortCodePattern.matcher(dest)
                .matches()) {
                if (category == null) 
                    category = 'Free';
            }
            if (StandardShortCodePattern != null && StandardShortCodePattern.matcher(dest)
                .matches()) {
                if (category != 'Possible Premium') {
                    category = 'Standard';
                    countryCode = country;
                }
            }
            if (PremiumShortCodePattern != null && PremiumShortCodePattern.matcher(dest)
                .matches()) {
                return ['Premium!', country]; // If it's premium we can return early. Otherwise continue to 
                                            // search for the worst case scenario. This happens because the patterns
                                            // are per country.
            }
            if (ShortCodePattern != null && ShortCodePattern.matcher(dest).matches()) {
                category = 'Possible Premium!';
                countryCode = country;
            }
        }
        category = category != null ? category : 'Not short code';
        countryCode = countryCode != null ? countryCode : '';
        return [category, countryCode];
    }

    // smsManager.sendTextMessageWithoutPersisting.implementation = function(destinationAddress, scAddress, text,pendingIntent, deliveryIntent){

    //     console.log('[+] Send Text message called');
    //     console.log('Destination Address: ' + destinationAddress);
    //     console.log('Source Address: '+scAddress);
    //     console.log('Text: '+text);
    //     this.sendTextMessageWithoutPersisting(destinationAddress,scAddress,text,pendingIntent,deliveryIntent);

    // }
}
"
}
