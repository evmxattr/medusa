{
    "Name": "content_providers/content_provider_query",
    "Description": "Monitor Content Provider Queries",
    "Help": "N/A",
    "Code": "
console.log('\\n-----------Content Provider Query Monitor by @chopin---------\\n');

var hook = Java.use('android.content.ContentProvider');
var hook234 = Java.use('android.content.ContentResolver');


var overloadCount111 = hook234['query'].overloads.length;
colorLog(\"Tracing \" +'query' + \" [\" + overloadCount111 + \" overload(s)]\",{ c: Color.Green });
                                            
for (var i = 0; i < overloadCount111; i++) {
                    
    hook234['query'].overloads[i].implementation = function() {
        colorLog(\"Content Provider Query Detected: \" ,{ c: Color.Yellow });
                    
                    
        if (arguments.length==4){
            console.log(\"[+] URI: \"+arguments[0]);
            console.log(\"    - Projection: \"+arguments[1]);
            console.log(\"    - QueryArgs: \"+arguments[2]);
        }
        else if (arguments.length==5){
            console.log(\"[+] URI: \"+arguments[0]);
            console.log(\"    - Projection: \"+arguments[1]);
            console.log(\"    - Selection: \"+arguments[2]);
            console.log(\"    - Selection Args: \"+arguments[3]); 
        }
        else if(arguments.length==6){
            console.log(\"[+] URI: \"+arguments[0]);
            console.log(\"    - Projection: \"+arguments[1]);
            console.log(\"    - Selection: \"+arguments[2]);   
            console.log(\"    - Selection Args: \"+arguments[3]);   
            console.log(\"    - Sort Order: \"+arguments[4]);    
        }
        var retval = this['query'].apply(this, arguments); 
        return retval;
                    
    }
}



var overloadCount111 = hook234['openFileDescriptor'].overloads.length;
colorLog(\"Tracing \" +'openFileDescriptor' + \" [\" + overloadCount111 + \" overload(s)]\",{ c: Color.Green });
                                            
for (var i = 0; i < overloadCount111; i++) {
                    
    hook234['openFileDescriptor'].overloads[i].implementation = function() {
        colorLog(\"Content Resolver openFileDescriptor Detected: \" ,{ c: Color.Yellow });
                    
                    
        if (arguments.length==2){
            console.log(\"[+] Content URI: \"+arguments[0]);
            console.log(\"    - Mode: \"+arguments[1]);
        }
        else if(arguments.length==3){
            console.log(\"[+] Content URI: \"+arguments[0]);
            console.log(\"    - Mode: \"+arguments[1]);
        }
        var retval = this['openFileDescriptor'].apply(this, arguments); 
        return retval;
                    
    }
}





var overloadCount11 = hook['query'].overloads.length;
colorLog(\"Tracing \" +'query' + \" [\" + overloadCount11 + \" overload(s)]\",{ c: Color.Green });
                                            
for (var i = 0; i < overloadCount11; i++) {
                    
    hook['query'].overloads[i].implementation = function() {
        colorLog(\"Content Provider Query Detected: \" ,{ c: Color.Blue });
                    
                    
        if (arguments.length==4){
            console.log(\"[+] URI: \"+arguments[0]);
            console.log(\"    - Projection: \"+arguments[1]);
            console.log(\"    - QueryArgs: \"+arguments[2]);
        }
        else if(arguments.length==6){
            console.log(\"[+] URI: \"+arguments[0]);
            console.log(\"    - Projection: \"+arguments[1]);
            console.log(\"    - Selection: \"+arguments[2]);   
            console.log(\"    - Selection Args: \"+arguments[3]);   
            console.log(\"    - Sort Order: \"+arguments[4]);    
        }
        var retval = this['query'].apply(this, arguments); 
        return retval;
                    
    }
}
"
}
