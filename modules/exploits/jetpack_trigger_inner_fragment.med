{
    "Name": "exploits/jetpack_trigger_inner_fragment",
    "Description": "dump the navigation graph IDs and displays the androidx.navigation.NavController class name (in case of obfuscation)",
    "Help": "n/a",
    "Code": "

    {
      const bundleClass = 'android.os.Bundle'
      let bundle = Java.use(bundleClass);
      let displayed=[];
      
      function tryGetFragments(navGraph){
        Java.choose(navGraph,
        {
            onMatch: function(instance)
            {
              let rId = 0;
              const fields = instance.class.getDeclaredFields();
              let nodes, nodeToStr;
              try
              {
                rId = instance._id.value;
              } catch(error)
              {
                console.log(error.stack);
              }
              
              for (const field of fields) {
                field.setAccessible(true);
                let typeName = field.getType().getName();
                if(typeName.includes('androidx.collection'))
                {
                  nodes = field.get(instance); 
                  nodeToStr = nodes.toString();
                }
              }
              if(!displayed.includes(rId))
              {
                if(rId != 0)
                  displayed.push(rId);
                colorLog('\\t\\\\_ Graph with id='+ rId + ' ' + instance + '\\n{', {c:Color.Cyan});
                let keyValuePairs = nodeToStr.substring(0, nodeToStr.length).split(', ');
                keyValuePairs.forEach(function(pair) {
                    log('\\t'+pair)
                  });
                colorLog('}',{c:Color.Cyan})
              }
            },
            onComplete: function() {
            }
        });
      }

    bundle.getBundle.implementation = function(innerBundle)
    {
      if(innerBundle == 'android-support-nav:controller:deepLinkExtras')
      {
          const msg = 'NavController implementation detected!, Printing stack trace:';
          styleLog(msg,[msg],StyleLogColorset.red,StyleLogColorset.green);
          printBacktrace();
          let stackTrace = Java.use('java.lang.Thread').currentThread().getStackTrace();
          let exceptionStackIndex = stackTrace.findIndex(stack => stack.getClassName() === bundleClass);
          let callingFunctionStack = stackTrace[exceptionStackIndex + 1];
          let navControllerClassName = callingFunctionStack.getClassName();
          colorLog('[+] Implementation Class: '+navControllerClassName,{c:Color.Cyan});
  
          const clazz = Java.use(navControllerClassName);
          const fields = clazz.class.getDeclaredFields();
      
          for (const field of fields) 
          {
            let type = field.getType();
              let interfaces = type.getInterfaces();
              for (let i = 0; i < interfaces.length; i++) 
              {
                if (interfaces[i].toString().includes('java.lang.Iterable')) {
                  colorLog('\\t\\\\_ NavGraph Implementation: '+type.getName(),{c:Color.Cyan})
                  tryGetFragments(type.getName());
              }
          }
        }
      }
      return this.getBundle(innerBundle);
    }
  }

"
}
